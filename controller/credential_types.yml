---
controller_credential_types:
  - name: Dynatrace Credential
    description: Dynatrace credential for use with Dynatrace API
    inputs:
      fields:
        - id: dynatrace_host
          type: string
          label: Dynatrace Host
        - id: dynatrace_client_id
          type: string
          label: Dynatrace Client Id
        - id: dynatrace_client_secret
          type: string
          label: Dynatrace Client Secret
          secret: true
      required:
        - dynatrace_host
        - dynatrace_client_id
        - dynatrace_client_secret
    injectors:
      env:
        DYNATRACE_HOST: !unsafe "{{ dynatrace_host }}"
        DYNATRACE_CLIENT_ID: !unsafe "{{ dynatrace_client_id }}"
        DYNATRACE_CLIENT_SECRET: !unsafe "{{ dynatrace_client_secret }}"

  - name: EE Utilities
    description: The EE Utilities Credential configuration below is compatible with infra.ee_utilities modules
    inputs:
      fields:
        - id: ee_base_reg_user
          type: string
          label: Base Registry Usernamex
        - id: ee_base_reg_password
          type: string
          label: Base Registry Password
          secret: true
        - id: ee_dest_reg
          type: string
          label: Destination Registry
          help_text: "ex: quay.io/zleblanc"
        - id: ee_dest_reg_user
          type: string
          label: Destination Registry Username
        - id: ee_dest_reg_password
          type: string
          label: Destination Registry Password
    injectors:
      extra_vars:
        ee_dest_reg: !unsafe "{{ ee_dest_reg }}"
        ee_base_reg_user: !unsafe "{{ ee_base_reg_user }}"
        ee_dest_reg_user: !unsafe "{{ ee_dest_reg_user }}"
        ee_base_reg_password: !unsafe "{{ ee_base_reg_password }}"
        ee_dest_reg_password: !unsafe "{{ ee_dest_reg_password }}"

  - name: HashiCorp Vault Credential
    description: HashiCorp Vault credential for use with community.hashi_vault collection
    inputs:
      fields:
        - id: vault_addr
          type: string
          label: Vault Address
        - id: vault_namespace
          type: string
          label: Vault Namespace
        - id: vault_token
          type: string
          label: Vault Token
          secret: true
        - id: vault_ca_cert
          type: string
          label: Vault CA Certificate
        - id: vault_skip_verify
          type: boolean
          label: Verify SSL
      required:
        - vault_addr
    injectors:
      env:
        VAULT_ADDR: !unsafe "{{ vault_addr }}"
        VAULT_NAMESPACE: !unsafe "{{ vault_namespace }}"
        VAULT_TOKEN: !unsafe "{{ vault_token }}"
        VAULT_CACERT: !unsafe "{{ vault_ca_cert }}"
        VAULT_SKIP_VERIFY: !unsafe "{{ vault_skip_verify }}"

  - name:  Microsoft AD Admin Credential
    description:  Microsoft AD Admin credential for use with microsoft.ad collection
    inputs:
      fields:
        - id: dns_domain_name
          type: string
          label: DNS Domain Name
          help_text: When state=domain, this is the DNS name of the domain to which the targeted Windows host should be joined.
        - id: domain_admin_user
          type: string
          label: Domain Admin User
          help_text: Username of a domain admin for the target domain (required to join or leave the domain).
        - id: domain_admin_password
          type: string
          label: Domain Admin Password
          secret: true
        - id: local_admin_password
          type: string
          label: Local Admin Password
          help_text: Password to be assigned to the local Administrator user (required when state=member_server).
          secret: true
      required:
        - dns_domain_name
        - domain_admin_user
        - domain_admin_password
    injectors:
      extra_vars:
        dns_domain_name: !unsafe "{{ dns_domain_name }}"
        domain_admin_user: !unsafe "{{ domain_admin_user }}"
        domain_admin_password: !unsafe "{{ domain_admin_password }}"
        domain_username: !unsafe "{{ domain_admin_user }}"
        domain_password: !unsafe "{{ domain_admin_password }}"
        local_admin_password: !unsafe "{{ local_admin_password }}"

  - name:  Microsoft AD LDAP Credential
    description: Microsoft AD LDAP credential for use with microsoft.ad.ldap inventory plugin
    inputs:
      fields:
        - id: ldap_server
          type: string
          label: LDAP Server
          help_text: The domain controller/server to connect to
        - id: ldap_port
          type: string
          label: LDAP Port
          help_text: Port 389 is used for LDAP and port 686 is used for LDAPS
        - id: ldap_username
          type: string
          label: LDAP Username
        - id: ldap_password
          type: string
          label: LDAP Password
          secret: true
        - id: ldap_auth_protocol
          type: string
          label: LDAP Auth Protocol
          choices:
            - simple
            - certificate
            - kerberos
            - negotiate
            - ntlm
        - id: ldap_cert_validation
          type: string
          label: LDAP Cert Validation
          choices:
            - always
            - ignore
            - ignore_hostname
          help_text: The certificate validation behaviour when using a TLS connection
        - id: ldap_ca_cert
          type: string
          label: LDAP CA Cert
          help_text: Can be the path to a CA certificate PEM or DER file, directory of PEM certificates, or the CA certificate PEM string that is used for certificate validation
        - id: ldap_certificate
          type: string
          label: LDAP Certificate
          help_text: The value can either be a path to a file containing the certificate or string of the PEM encoded certificate
        - id: ldap_certificate_key
          type: string
          label: LDAP Certificate Key
          help_text: The value can either be a path to a file containing the key in the PEM or DER encoded form, or it can be the string of a PEM encoded key
        - id: ldap_certificate_password
          type: string
          label: LDAP Certificate Password
          secret: true
          help_text: The password used to decrypt the certificate key specified by LDAP Certificate or LDAP Certificate Key
      required:
        - ldap_server
    injectors:
      env:
        MICROSOFT_AD_LDAP_SERVER: !unsafe "{{ ldap_server }}"
        MICROSOFT_AD_LDAP_PORT: !unsafe "{{ ldap_port | default('389') }}"
        MICROSOFT_AD_LDAP_USERNAME: !unsafe "{{ ldap_username }}"
        MICROSOFT_AD_LDAP_PASSWORD: !unsafe "{{ ldap_password }}"
        MICROSOFT_AD_LDAP_AUTH_PROTOCOL: !unsafe "{{ ldap_auth_protocol | default('negotiate', true) }}"
        MICROSOFT_AD_LDAP_CERT_VALIDATION: !unsafe "{{ ldap_cert_validation }}"
        MICROSOFT_AD_LDAP_CA_CERT: !unsafe "{{ ldap_ca_cert }}"
        MICROSOFT_AD_LDAP_CERTIFICATE: !unsafe "{{ ldap_certificate }}"
        MICROSOFT_AD_LDAP_CERTIFICATE_KEY: !unsafe "{{ ldap_certificate_key }}"
        MICROSOFT_AD_LDAP_CERTIFICATE_PASSWORD: !unsafe "{{ ldap_certificate_password }}"

  - name:  Microsoft AD User Credential
    description:  Microsoft AD User credential for use with microsoft.ad collection
    inputs:
      fields:
        - id: domain_user
          type: string
          label: Domain Username
          help_text: |
              The username to use when interacting with AD.
              If this is not set then the user that is used for authentication will be the connection user.
              Ansible will be unable to use the connection user unless auth is Kerberos with credential delegation or CredSSP, or become is used on the task.
        - id: domain_password
          type: string
          label: Domain Password
          secret: true
        - id: domain_server
          type: string
          label: Local Admin Password
          help_text: |
              Specified the Active Directory Domain Services instance to connect to.
              Can be in the form of an FQDN or NetBIOS name.
              If not specified then the value is based on the default domain of the computer running PowerShell.
      required:
        - domain_user
        - domain_password
    injectors:
      extra_vars:
        domain_user: !unsafe "{{ domain_user }}"
        domain_password: !unsafe "{{ domain_password }}"
        domain_server: !unsafe "{{ domain_server }}"

  - name:  Postgresql Credential
    description:  Postgresql credential for use with community.postgresql collection
    inputs:
      fields:
        - id: pgsql_login_host
          type: string
          label: Login Host
          help_text: Host running the database
        - id: pgsql_login_user
          type: string
          label: Login User
          help_text: The username this module should use to establish its PostgreSQL session
        - id: pgsql_login_password
          type: string
          label: Login Password
          help_text: The password this module should use to establish its PostgreSQL session
        - id: pgsql_port
          type: string
          label: Port
          help_text: "Database port to connect to (default: 5432)"
        - id: pgsql_ssl_cert
          type: string
          label: SSL Cert Path
          help_text: Specifies the file name of the client SSL certificate
        - id: pgsql_ssl_key
          type: string
          label: SSL Key Path
          help_text: Specifies the location for the secret key used for the client certificate
        - id: pgsql_ssl_mode
          type: string
          choices:
            - allow
            - disable
            - prefer
            - require
            - verify-ca
            - verify-full
          label: SSL Mode
          help_text: Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server
      required:
        - pgsql_login_host
        - pgsql_login_user
        - pgsql_login_password
    injectors:
      extra_vars:
        login_host: !unsafe '{{ pgsql_login_host }}'
        login_user: !unsafe '{{ pgsql_login_user }}'
        login_password: !unsafe '{{ pgsql_login_password }}'
        login_port: !unsafe '{{ pgsql_port }}'
        ssl_cert: !unsafe '{{ pgsql_ssl_cert }}'
        ssl_key: !unsafe '{{ pgsql_ssl_key }}'
        ssl_mode: !unsafe '{{ pgsql_ssl_mode }}'

  - name: Generic Token
    description: generic credential for injection token into execution environment
    inputs:
      fields:
        - id: generic_token
          type: string
          label: Token
          secret: true
      required:
        - token
    injectors:
      extra_vars::
        generic_token: !unsafe "{{ generic_token }}"

  - name: Automation Hub Credential
    description: Automation Hub credential for use with infra.ah_configuration collection
    inputs:
      fields:
        - id: pah_host
          type: string
          label: Host
        - id: pah_username
          type: string
          label: Username
        - id: pah_password
          type: string
          label: Password
          secret: true
        - id: pah_api_token
          type: string
          label: Password
          secret: true
      required:
        - pah_host
    injectors:
      env:
        AH_HOST: !unsafe "{{ pah_host }}"
        AH_PASSWORD: !unsafe "{{ pah_password }}"
        AH_USERNAME: !unsafe "{{ pah_username }}"
        AH_API_TOKEN: !unsafe "{{ pah_api_token }}"

  - name: Proxmox VE Credential
    description: Proxmox VE credential for use with community.general.proxmox* modules
    inputs:
      fields:
        - id: pve_api_host
          type: string
          label: PVE API Host
        - id: pve_api_user
          type: string
          label: PVE API User
        - id: pve_api_token_id
          type: string
          label: PVE API Token Id
        - id: pve_api_token_secret
          type: string
          label: PVE API Token Secret
          secret: true
        - id: pve_api_password
          type: string
          label: PVE API Password
          secret: true
      required:
        - pve_api_host
        - pve_api_user
        - pve_api_token_id
        - pve_api_token_secret
    injectors:
      extra_vars:
        proxmox_api_host: !unsafe "{{ pve_api_host }}"
        proxmox_api_user: !unsafe "{{ pve_api_user }}"
        proxmox_api_password: !unsafe "{{ pve_api_password }}"
        proxmox_api_token_id: !unsafe "{{ pve_api_token_id }}"
        proxmox_api_token_secret: !unsafe "{{ pve_api_token_secret }}"

  - name:  RedHat Subscription Manager Credential
    description:  RedHat Subscription Manager credential for use with community.general.redhat_subscription module
    inputs:
      fields:
        - id: rhsm_user
          type: string
          label: RHSM Username
        - id: rhsm_password
          type: string
          label: RHSM Password
          secret: true
      required:
        - rhsm_user
        - rhsm_password
    injectors:
      extra_vars:
        rhsm_user: !unsafe "{{ rhsm_user }}"
        rhsm_password: !unsafe "{{ rhsm_password }}"

  - name: ServiceNow Credential
    description: ServiceNow credential for use with servicenow.itsm collection
    inputs:
      fields:
        - id: snow_host
          type: string
          label: ServiceNow Host
        - id: snow_user
          type: string
          label: ServiceNow User
        - id: snow_password
          type: string
          label: ServiceNow User"s Password
          secret: true
        - id: snow_client_id
          type: string
          label: ServiceNow Client Id
        - id: snow_client_secret
          type: string
          label: ServiceNow Client Secret
          secret: true
      required:
        - snow_host
        - snow_user
        - snow_password
    injectors:
      env:
        SN_HOST: !unsafe "{{ snow_host }}"
        SN_PASSWORD: !unsafe "{{ snow_password }}"
        SN_USERNAME: !unsafe "{{ snow_user }}"
        SN_CLIENT_ID: !unsafe "{{ snow_client_id }}"
        SN_CLIENT_SECRET: !unsafe "{{ snow_client_secret }}"

  - name: SMTP Server Credential
    description: SMTP Server credential for use with ansible.builtin.mail module
    inputs:
      fields:
        - id: email_smtp_server
          type: string
          label: Server
          help_text: Example - smtp.gmail.com
        - id: email_smtp_server_port
          type: string
          label: Port
          help_text: Example - 587
        - id: email_smtp_username
          type: string
          label: Username
          help_text: Username to authenticate with SMTP server
        - id: email_smtp_password
          type: string
          label: Password
          secret: true
          help_text: Password to authenticate with SMTP server
        - id: email_smtp_from_address
          type: string
          label: From Address
          help_text: Example - sender@gmail.com
      required:
        - email_smtp_server
        - email_smtp_server_port
        - email_smtp_username
        - email_smtp_password
    injectors:
      extra_vars:
        email_smtp_server: !unsafe "{{ email_smtp_server }}"
        email_smtp_password: !unsafe "{{ email_smtp_password }}"
        email_smtp_username: !unsafe "{{ email_smtp_username }}"
        email_smtp_server_port: !unsafe "{{ email_smtp_server_port }}"
        email_smtp_from_address: !unsafe "{{ email_smtp_from_address }}"

  - name: TMDB Credential
    description: TMDB credential for use with zjleblanc.tmdb collection
    inputs:
      fields:
        - id: tmdb_api_url
          type: string
          label: API URL
          help_text: version 3 - https://api.themoviedb.org/3
        - id: tmdb_api_key
          type: string
          label: API Key
          secret: true
        - id: tmdb_username
          type: string
          label: Username
          help_text: Username to validate TMDB token
        - id: tmdb_password
          type: string
          label: Password
          secret: true
          help_text: Password to validate TMDB token
        - id: tmdb_account_id
          type: string
          label: Account Id
          help_text: Required to make changes to user account
      required:
        - tmdb_api_url
        - tmdb_api_key
        - tmdb_username
        - tmdb_password
    injectors:
      extra_vars:
        tmdb_api_url: !unsafe "{{ tmdb_api_url }}"
        tmdb_api_key: !unsafe "{{ tmdb_api_key }}"
        tmdb_username: !unsafe "{{ tmdb_username }}"
        tmdb_password: !unsafe "{{ tmdb_password }}"
        tmdb_account_id: !unsafe "{{ tmdb_account_id }}"
      env:
        TMDB_API: !unsafe "{{ tmdb_api_url }}"
        TMDB_API_KEY: !unsafe "{{ tmdb_api_key }}"
        TMDB_USERNAME: !unsafe "{{ tmdb_username }}"
        TMDB_PASSWORD: !unsafe "{{ tmdb_password }}"
        TMDB_ACCOUNT_ID: !unsafe "{{ tmdb_account_id }}"

  - name:  VMWare Credential
    description:  VMWare credential for use with community.vmware collection
    inputs:
      fields:
        - id: vmware_host
          type: string
          label: VMWare Host
          help_text: The hostname or IP address of the vSphere vCenter or ESXi server
        - id: vmware_port
          type: string
          label: VMWare Port
          help_text: The port number of the vSphere vCenter or ESXi server
        - id: vmware_user
          type: string
          label: VMWare User
          help_text: The username of the vSphere vCenter or ESXi server
        - id: vmware_password
          type: string
          label: VMWare Password
          help_text: The password of the vSphere vCenter or ESXi server
        - id: vmware_validate_certs
          type: boolean
          label: Validate Certs
          help_text: Allows connection when SSL certificates are not valid
        - id: vmware_proxy_host
          type: string
          label: VMWare Proxy Host
          help_text: Address of a proxy that will receive all HTTPS requests and relay them
        - id: vmware_proxy_port
          type: string
          label: VMWare Proxy Port
          help_text: Port of the HTTP proxy that will receive all HTTPS requests and relay them
      required:
        - vmware_host
        - vmware_user
        - vmware_password
    injectors:
      env:
        VMWARE_HOST: !unsafe '{{ vmware_host }}'
        VMWARE_PORT: !unsafe '{{ vmware_port }}'
        VMWARE_USER: !unsafe '{{ vmware_user }}'
        VMWARE_PASSWORD: !unsafe '{{ vmware_password }}'
        VMWARE_VALIDATE_CERTS: !unsafe '{{ vmware_validate_certs }}'
        VMWARE_PROXY_HOST: !unsafe '{{ vmware_proxy_host }}'
        VMWARE_PROXY_PORT: !unsafe '{{ vmware_proxy_port }}'
...